---
# Default values
# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
fullnameOverride: prometheus
defaultRules:
  rules:
    kubeApiserverAvailability: true
    kubeApiserver: true

kubeApiServer:
  enabled: true

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: false

kubeProxy:
  enabled: false

kubelet:
  enabled: false
  serviceMonitor:
    metricRelabelings:
      - action: replace
        sourceLabels:
          - node
        targetLabel: instance

kubeScheduler:
  enabled: false

kube-state-metrics:
  enabled: true
  metricLabelsAllowlist:
    - "persistentvolumeclaims=[*]"
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

nodeExporter:
      enabled: true

prometheusOperator:
  createCustomResource: true
  configReloaderCpu: 200m
  resources:
    requests:
      memory: 164Mi
  admissionWebhooks:
    enabled: true

alertmanager:
  alertmanagerSpec:
    podAntiAffinity: "hard"
  config:
    global:
      resolve_timeout: 5m
    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      # Apply inhibition if the alertname is the same.
      equal: ['alertname', 'namespace']
    templates: ["*.tmpl"]
  templateFiles:
    pagerduty-custom.tmpl: |-
      {{- define "pagerduty.custom.description" -}}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}{{- end -}}
  storage:
    volumeClaimTemplate:
      spec:
        resources:
          requests:
            storage: 1Gi

prometheus:
  prometheusSpec:
    replicas: 1
    replicaExternalLabelName: "replica"
    ruleSelector: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    retention: 168h
    enableAdminAPI: true
    walCompression: true
    resources:
      requests:
        memory: 1500Mi
      limits:
        memory: 2500Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 20Gi

grafana:
  defaultDashboardsTimezone: "Europe/Warsaw"
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      node-exporter:
        gnetId: 15172
        revision: 6
        datasource: Prometheus
      temp:
        gnetId: 15202
        revision: 1
        datasource: Prometheus
      flux-cluster:
        url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/monitoring-config/dashboards/cluster.json
        datasource: Prometheus
      flux-control-plane:
        url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/monitoring-config/dashboards/control-plane.json
        datasource: Prometheus
