---
# Default values
# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
crds:
  enabled: true
cleanPrometheusOperatorObjectNames: true
alertmanager:
  ingress:
    enabled: true
    annotations:
      hajimari.io/enable: "true"
      nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
      hajimari.io/appName: "Alert Manager"
      hajimari.io/icon: mdi:alert-decagram-outline
    ingressClassName: nginx
    hosts: ["alert-manager.k8sj.io"]
    tls:
      - hosts:
        - "alert-manager.k8sj.io"
    pathType: Prefix
  alertmanagerSpec:
    podAntiAffinity: "hard"
    storage:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 1Gi
kubeApiServer:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # Drop high cardinality labels
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
kubelet:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # Drop high cardinality labels
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: drop
        sourceLabels: ["__name__"]
        regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
kubeScheduler:
  enabled: false
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: false
kubeProxy:
  enabled: false
prometheus:
  ingress:
    enabled: true
    annotations:
      hajimari.io/enable: "true"
      nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
      hajimari.io/appName: Prometheus
      hajimari.io/icon: simple-icons:prometheus
    ingressClassName: nginx
    hosts: ["prometheus.k8sj.io"]
    tls:
      - hosts:
          - "prometheus.k8sj.io"
    pathType: Prefix
  prometheusSpec:
    scrapeInterval: 10s # Must match interval in Grafana Helm chart
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    enableAdminAPI: true
    walCompression: true
    enableFeatures:
      - auto-gomemlimit
      - memory-snapshot-on-shutdown
      - new-service-discovery-manager
    retention: 14d
    retentionSize: 70GB
    resources:
      requests:
        cpu: 100m
      limits:
        memory: 4000Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          resources:
            requests:
              storage: 75Gi

    additionalScrapeConfigs:
      - job_name: 'linkerd-controller'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - linkerd
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_pod_container_port_name
          action: keep
          regex: admin-http
        - source_labels: [__meta_kubernetes_pod_container_name]
          action: replace
          target_label: component

      - job_name: 'linkerd-service-mirror'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
          - __meta_kubernetes_pod_container_port_name
          action: keep
          regex: linkerd-service-mirror;admin-http$
        - source_labels: [__meta_kubernetes_pod_container_name]
          action: replace
          target_label: component

      - job_name: 'linkerd-proxy'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_pod_container_name
          - __meta_kubernetes_pod_container_port_name
          - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
          action: keep
          regex: ^linkerd-proxy;linkerd-admin;linkerd$
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: pod
        # special case k8s' "job" label, to not interfere with prometheus' "job"
        # label
        # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
        # k8s_job=foo
        - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
          action: replace
          target_label: k8s_job
        # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
        - action: labeldrop
          regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
        # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
        # deployment=foo
        - action: labelmap
          regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
        # drop all labels that we just made copies of in the previous labelmap
        - action: labeldrop
          regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
        # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
        # foo=bar
        - action: labelmap
          regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
        # Copy all pod labels to tmp labels
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
          replacement: __tmp_pod_label_$1
        # Take `linkerd_io_` prefixed labels and copy them without the prefix
        - action: labelmap
          regex: __tmp_pod_label_linkerd_io_(.+)
          replacement:  __tmp_pod_label_$1
        # Drop the `linkerd_io_` originals
        - action: labeldrop
          regex: __tmp_pod_label_linkerd_io_(.+)
        # Copy tmp labels into real labels
        - action: labelmap
          regex: __tmp_pod_label_(.+)

prometheus-node-exporter:
  fullnameOverride: node-exporter
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
kube-state-metrics:
  fullnameOverride: kube-state-metrics
  metricLabelsAllowlist:
    - pods=[*]
    - deployments=[*]
    - persistentvolumeclaims=[*]
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
grafana:
  enabled: false
  forceDeployDashboards: true

